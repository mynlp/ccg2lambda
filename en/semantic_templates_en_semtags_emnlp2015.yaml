#
#  Copyright 2015 Koji Mineshima
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

##### Semantic templates for English using semantic tags #####

## NOTE: In some cases we do still check the surface form of words due to the
## existence of certain specialized predicates that are hard to invoke using 
## semantic tags in isolation.


##### Unary lexical rules #####

# existential type-raising from N to NP
- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. (E(x) & F1(x) & F2(x))

# Unary rule for negative NPs
- category: NP
  rule: lex
  semantics: \C F1 F2. - exists x. (C(x) & F1(x) & F2(x))
  child_any_stag: NOT

# Unary rule for proportional NPs
- category: NP
  rule: lex
  semantics: \C. C
  child_any_base: most

# existential type-raising for proper nouns from N to NP
- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
  child0_costag: NAM

- category: NP
  rule: lex
  semantics: \E F1 F2. exists x. ((x = E) & F1(E) & F2(E))
  child_any_costag: NAM
  child_any_stag: DIS

- category: N\N
  rule: lex
  semantics: \V F x. (V(\G1 G2.G2(x)) & F(x))

- category: NP\NP
  rule: lex
  semantics: \V Q F1. Q(\x.(V(\F2 F3.F3(x)) & F1(x)))

- category: S[X=true]/(S[X=true]\NP)
  rule: tr
  semantics: \Q V. V(Q)


##### Binary lexical rules #####

## universal interpretattion of plural definite descriptions
- category: NP
  rule: fa
  semantics: \L F1 F2 F3. forall x. (F1(x) -> (F2(x) -> F3(x)))
  child0_stag: DEF
  child_any_pos: NNPS

## Conjunction
- category: S\S
  rule: conj
  semantics: \L S1 S2. (S1 & S2)
  child0_stag: AND

- category: NP\NP
  rule: conj
  semantics: \L Q1 Q2 F1 F2. (Q2(F1, F2) & Q1(F1, F2))
  child0_stag: GRP

- category: NP\NP
  rule: conj
  semantics: \L Q1 Q2 F1 F2. (Q2(F1, F2) & Q1(F1, F2))
  child0_stag: AND

- category: N\N
  rule: conj
  semantics: \L F1 F2 x. (F1(x) & F2(x))
  child0_stag: AND

- category: (S\NP)\(S\NP)
  rule: conj
  semantics: \L V1 V2 Q. Q(\w.TrueP, \x.(V1(\F1 F2.F2(x)) & V2(\F1 F2.F2(x))))
  child0_stag: COO

- category: (N/N)\(N/N)
  rule: conj
  semantics: \L M1 M2 F x. M1(M2(F),x)
  child0_stag: AND

- category: (N/N)/(N/N)
  rule: conj
  semantics: \L M1 M2 F x. M1(M2(F),x)
  child0_stag: AND

## Disjunction
- category: S\S
  rule: conj
  semantics: \L S1 S2. (S1 & S2)
  child0_stag: DIS

- category: NP\NP
  rule: conj
  semantics: \L Q1 Q2 F1 F2. (Q2(F1, F2) | Q1(F1, F2))
  child0_stag: DIS

- category: N/N
  rule: conj
  semantics: \L F1 F2 x. (F1(x) | F2(x))
  child0_stag: DIS

- category: N\N
  rule: conj
  semantics: \L F1 F2 x. (F1(x) | F2(x))
  child0_stag: DIS

- category: (S\NP)\(S\NP)
  rule: conj
  semantics: \L V1 V2 Q. Q(\w.TrueP, \x.(V1(\F1 F2.F2(x)) | V2(\F1 F2.F2(x))))
  child0_stag: DIS

- category: (N/N)\(N/N)
  rule: conj
  semantics: \L M1 M2 F x. (M1(F,x) | M2(F,x))
  child0_stag: DIS

- category: (N/N)/(N/N)
  rule: conj
  semantics: \L M1 M2 F x. M1(M2(F),x)
  child0_stag: DIS

## sentence final particle
- category: S
  rule: rp
  semantics: \S D. S

## Rules for commas
- category: S
  rule: lp
  semantics: \L S. S
  child0_stag: NIL

- category: NP
  rule: rp
  semantics: \L R. L
  child0_stag: NIL

- category: S\NP
  rule: rp
  semantics: \L R. L
  child0_stag: NIL

- category: NP\NP
  rule: conj
  semantics: \L Q1 Q2 F1 F2. (Q2(F1, F2) & Q1(F1, F2))
  child0_stag: EQU

- category: NP\NP
  rule: conj
  semantics: \L Q1 Q2 F1 F2. (Q2(F1, F2) | Q1(F1, F2))
  child0_stag: NIL
  child_any_stag: DIS

- category: S\S
  rule: conj
  semantics: \L S. S
  child0_stag: NIL


##### Noun Phrases and Pronouns #####

## Common nouns
- category: N
  semantics: \E x. E(x)
  coq_type: Entity -> Prop

## Proper nouns
- category: N
  semantics: \E. E
  costag: NAM

- category: N
  semantics: \E. E
  costag: UNE
  pos: NNP

# default existential interpretation
- category: NP
  semantics: \E F1 F2. exists x. (F1(x) & F2(x))

- category: NP
  semantics: \E F1 F2. forall x. (F1(x) -> F2(x))
  stag: AND

- category: NP
  semantics: \E F1 F2. forall x. (_people(x) -> (F1(x) -> F2(x)))
  surf: everyone

- category: NP
  semantics: \E F1 F2. exists x. (two(x) & F1(x) & F2(x))
  surf: both

- category: NP
  semantics: \E F1 F2. (exists x. (F1(x) & two(x)) & forall x. (F1(x) -> - F2(x)))
  surf: neither


##### Determiners #####

# default existential interpretation
- category: NP[nb=true]/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))

- category: NP[nb=true]/N
  semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> F3(x)))
  stag: AND

- category: NP[nb=true]/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))
  stag: DIS

- category: NP[nb=true]/N
  semantics: \E F1 F2 F3. exists x. (F1(x) & F2(x) & F3(x))
  stag: DEF

- category: NP[nb=true]/N
  semantics: \E F1 F2 F3. forall x. (F1(x) -> (F2(x) -> - F3(x)))
  stag: NOT

- category: NP[nb=true]/N
  semantics: \E F1 F2 F3. Most(\x(F1(x) & F2(x)), F3)
  surf: most

- category: NP[nb=true]/N
  semantics: \E F1 F2 F3. exists x. (two(x) & F1(x) & F2(x) & F3(x))
  surf: both

- category: NP[nb=true]/N
  semantics: \E F1 F2 F3. (exists x. (F1(x) & two(x)) & forall x. (F1(x) -> (F2(x) -> - F3(x))))
  surf: neither

- category: NP/NP
  semantics: \E Q F1 F2. forall x. (Q(\w.TrueP, \y.((x = y) & F1(y))) -> F2(x))
  stag: AND

- category: NP\NP
  semantics: \E Q F1 F2. forall x. (Q(\w.TrueP, \y.((x = y) & F1(y))) -> F2(x))
  stag: AND


##### Adverbs #####

- category: (N/N)/(N/N) 
  semantics: \E A F x. (E(x) & A(F)(x))
  coq_type: Entity -> Prop

- category: (S\NP)\(S\NP)
  semantics: \E V Q. Q(\w.TrueP, \x.(E(x) & V(\F1 F2.F2(x))))
  coq_type: Entity -> Prop

- category: (S\NP)/(S\NP)
  semantics: \E V Q. Q(\w.TrueP, \x.(E(x) & V(\F1 F2.F2(x))))
  coq_type: Entity -> Prop

- category: (S/S)/NP
  semantics : \E Q S. (E(Q(\w.TrueP, \w.TrueP),S) & S)
  coq_type: Prop -> Prop -> Prop

- category: ((S\NP)\(S\NP))/S[dcl=true]
  semantics: \E S V Q. Q(\w.TrueP, \x.(S & V(\F1 F2.F2(x)) & E(S, V(\F1 F2.F2(x)))))
  coq_type: Entity -> Prop

- category: ((S\NP)\(S\NP))/((S\NP)\(S\NP))
  semantics: \E A V Q. Q(\w.TrueP, \x.(A(V)(\F1 F2.(F2(x) & E(x)))))
  coq_type: Entity -> Prop


##### Modifiers #####
- category: N/N
  semantics: \E F x. (E(x) & F(x))
  coq_type: Entity -> Prop

- category: N/N
  semantics: \E F1 F2 F3. Most(\x.(F1(x) & F2(x)), F3)
  surf: most

- category: N\N
  semantics: \E F x. (E(x) & F(x))
  coq_type: Entity -> Prop

- category: (N/N)\NP
  semantics: \E Q F x. Q(\w.TrueP, \y.(E(x,y) & F(x)))
  coq_type: Entity -> Entity -> Prop


##### Prepositions #####

- category: (NP\NP)/NP
  semantics: \E Q1 Q2 F1. Q2(\x.(Q1(\w.TrueP, \y.E(x,y)) & F1(x)))
  coq_type: Entity -> Entity -> Prop

- category: PP/NP
  semantics: \E Q x. Q(\w.TrueP, \y.E(x,y))
  coq_type: Entity -> Entity -> Prop

- category: PP/(S[ng=true]\NP)
  semantics: \E V x. V(\F1 F2.F2(x))
  coq_type: Entity -> Entity -> Prop

- category: (NP\NP)/S
  semantics: \E S Q F1 F2. (Q(F1,F2) & S)

- category: ((S\NP)\(S\NP))/NP
  semantics: \E Q1 V Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.(E(x,y) & V(\F1 F2.F2(x)))))
  coq_type: Entity -> Entity -> Prop

- category: ((S\NP)\(S\NP))/(S[ng=true]\NP)
  semantics: \E V1 V2 Q. Q(\w.TrueP, \x.V1(\F1 F2.(V2(\G1 G2.G2(x)) & F2(x))))

- category: ((S\NP)\(S\NP))/(S[ng=true]\NP)
  semantics: \E V1 V2 Q. Q(\w.TrueP, \x.V1(\F1 F2.(V2(\G1 G2.G2(x)) & -F2(x))))
  stag: NOT

- category: (NP\NP)/(S[ng=true]\NP)
  semantics: \E V Q F. Q(\x.V(\G1 G2.(G2(x) & F(x))))


##### Verb phrases #####

## intransitive verbs
- category: S\NP
  semantics: \E Q. Q(\w.TrueP, \x.E(x))
  coq_type: Entity -> Prop

- category: S\NP
  semantics: \E Q. Q(\w.TrueP, \x.(Prog(E(x))))
  coq_type: Entity -> Prop
  stag: EXG

## transitive verbs
- category: (S\NP)/NP
  semantics: \E Q1 Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.E(x,y)))
  coq_type: Entity -> Entity -> Prop

- category: (S\NP)/NP
  semantics: \E Q1 Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.Prog(E(x,y))))
  coq_type: Entity -> Entity -> Prop
  stag: EXG

- category: ((S\NP)/PP)/NP
  semantics: \E Q1 F Q2. Q2(\w.TrueP, \x.(Q1(\w.TrueP, \y.E(x,y)) & F(x)))
  coq_type: Entity -> Entity -> Prop

- category: (S[dcl=true]\NP)/(S[to=true]\NP)
  semantics: \E V Q. Q(\w.TrueP, \x.V(\F1 F2.E(x,F2(x))))
  coq_type: Entity -> Prop -> Prop

- category: ((S\NP)/(S[ng=true]\NP))/NP
  semantics: \E Q1 V Q2. Q2(\w.TrueP, \x.E(x,Q1(\w.TrueP, \y.V(\F1 F2.F2(y)))))
  coq_type: Entity -> Entity -> Entity -> Prop

- category: ((S[dcl=true]\NP)/(S[to=true]\NP))/NP
  semantics: \E Q1 V Q2. Q2(\w.TrueP, \x.E(x,Q1(\w.TrueP, \y.V(\F1 F2.F2(y)))))
  coq_type: Entity -> Prop -> Prop

- category: ((S\NP)/NP)/NP
  semantics: \E Q1 Q2 Q3. Q3(\w.TrueP,\x1.Q2(\w.TrueP,\x2.Q1(\w.TrueP,\x3.E(x1,x2,x3))))
  coq_type: Entity -> Entity -> Entity -> Prop

- category: (S\NP)/PP
  semantics: \E F Q. Q(\w.TrueP, \x.(E(x) & F(x)))
  coq_type: Entity -> Prop

- category: (S\NP)/S
  semantics: \E S Q. Q(\w.TrueP, \x.E(x,S))
  coq_type: Entity -> Prop -> Prop

- category: (S\NP)/S[em=true]
  semantics: \E S Q. Q(\w.TrueP, \x.E(x,S))
  costag: EVE

- category: (S\NP)/S[qem=true]
  semantics: \E S Q. Q(\w.TrueP, \x.E(x,S))
  costag: EVE

- category: ((S[dcl=true]\NP)/(S[b=true]\NP))/NP
  semantics: \E Q1 V Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.(E(x,y) & V(\F1 F2.F2(y)))))
  coq_type: Entity -> Entity -> Prop


##### Copula #####

- category: (S\NP)/NP
  semantics: \E Q1 Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.(x = y)))
  base: be

- category: (S[dcl=true]\NP)/PP
  semantics: \E F Q. Q(\w.TrueP, F)
  costag: TNS

- category: (S\NP)/(S[pss=true]\NP)
  semantics: \E V Q. Q(\w.TrueP, \x.V(\F1 F2.F2(x)))

- category: (S\NP)/(S[adj=true]\NP)
  semantics: \E X. X
  costag: TNS

- category: (S\NP)/(S[adj=true]\NP)
  semantics: \E X. X
  costag: TNS

- category: ((S[dcl=true]\NP[expl=true])/S[em=true])/(S[adj=true]\NP)
  semantics: \E V S Q. V(\F1 F2.F2(S))

- category: (S[dcl=true]\(S[adj=true]\NP))/NP
  semantics: \E Q1 Q2. Q2(\w.TrueP, \x.Q1(\w.TrueP, \y.E(x,y)))
  coq_type: Entity -> Entity -> Prop


##### Negation #####

- category: (S\NP)\(S\NP) 
  semantics: \E V Q. Q(\w.TrueP, \x.-V(\F1 F2.F2(x)))
  stag: NOT

- category: (S[adj=true]\NP)/(S[adj=true]\NP)
  semantics: \E V Q. Q(\w.TrueP, \x.-V(\F1 F2.F2(x)))
  stag: NOT


##### Adjectives #####

- category: S[adj=true]\NP
  semantics: \E Q. Q(\w.TrueP, \x.E(x))
  coq_type: Entity -> Prop

- category: S[adj=true]\NP
  semantics: \E Q. Q(\w.TrueP, \x.E(x))
  stag: IST

- category: S[adj=true]\NP
  semantics: \E Q. Q(\w.TrueP, \x.E(x))
  stag: SST

- category: N/N
  semantics: \E F x. E(F(x))
  stag: PST

- category: (S[adj=true]\NP)/S[em=true]
  semantics: \E S Q. Q(\w.TrueP, \x.E(x,S))
  coq_type: Entity -> Prop -> Prop


##### Auxiliary verbs #####

- category: (S[dcl=true]\NP)/(S[b=true]\NP)
  semantics: \E V Q. Q(\w.TrueP, \x.V(\F1 F2.E(F2(x))))
  coq_type: Prop -> Prop

- category: (S[dcl=true]\NP)/(S[b=true]\NP)
  semantics: \E V. V
  costag: TNS


##### Floating quantifiers #####

- category: (S\NP)/(S\NP)
  semantics: \E V Q. forall x. (Q(\w.TrueP, \y.(x = y)) -> V(\F1 F2.F2(x)))
  stag: AND

- category: (S\NP)\(S\NP)
  semantics: \E V Q. forall x. (Q(\w.TrueP, \y.(x = y)) -> V(\F1 F2.F2(x)))
  stag: AND


##### Relative clauses #####

- category: (NP\NP)/(S[dcl=true]\NP)
  semantics: \E V Q F1. Q(\x. (V(\F2 F3. F3(x)) & F1(x)))

- category: NP/(S[dcl=true]/NP)
  semantics: \E V F1 F2. exists x. (V(\G1 G2.G2(x)) & F1(x) & F2(x))

- category: (NP\NP)/(S[dcl=true]/NP)
  semantics: \E V Q F1. Q(\x. (V(\F2 F3. F3(x)) & F1(x)))


##### Complementizers #####

- category: S[em=true]/S[dcl=true]
  semantics: \E X. X


##### Connectives #####

## default conjunctive interpretation
- category: (S/S)/S[dcl=true]
  semantics: \E S1 S2. (S1 & S2 & E(S1, S2))
  coq_type: Prop -> Prop -> Prop

- category: (S/S)/S[dcl=true]
  semantics: \E S1 S2. (S1 -> S2)
  stag: IMP

- category: (S/S)/S[dcl=true]
  semantics: \E S1 S2. (S1 & S2)
  costag: DSC

- category: ((S\NP)\(S\NP))/S[dcl=true]
  semantics: \E S V Q. E(S, V(Q))
  stag: REL

- category: (S\NP)/(S\NP)
  semantics: \E V Q. V(Q)
  stag: ALT

- category : N/N
  semantics: \E X.X
  costag: LOG


##### Semantically empty expressions #####

- category: NP[thr=true]
  semantics: \E F1 F2. exists x.F2(x)

- category: (S[to=true]\NP)/(S[b=true]\NP)
  semantics: \E X. X

- category: S[asup=true]\NP
  semantics: \E X. X

- category: (S/S)/(S[asup=true]\NP)
  semantics: \E X Y. Y


##### Possesive particle #####

- category: (NP[nb=true]/N)\NP
  semantics: \E Q F1 F2 F3. exists x.((Q(\w.TrueP, \y.Rel(x, y)) & F1(x)) & F2(x) & F3(x))
  stag: HAS


##### Sentence final particle #####

- category: .
  semantics: \S X. X
  stag: NIL

- category: =true,
  semantics: \S X. X
  stag: NIL


